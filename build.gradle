plugins {
    id 'fabric-loom' version '1.9-SNAPSHOT' apply(false)
    id 'net.neoforged.moddev.legacyforge' version '2.0.88' apply(false)
    id "me.modmuss50.mod-publish-plugin" version "0.8.4"
    id 'org.jetbrains.kotlin.jvm' version '2.2.0-Beta2' apply(false)
    id 'org.jetbrains.kotlin.plugin.serialization' version '2.2.0-Beta2' apply(false)
}

publishMods {
    changelog = file("changelog.md").text.split('\n').collect { string -> {
        if (!string.isBlank()) {
            string + "</br>"
        } else{
            string
        }
    }}.join('\n')
    type = BETA
    //dryRun = true
    // CurseForge options used by both Fabric and Forge
    def cfOptions = curseforgeOptions {
        accessToken = file("D:\\curseforge-key.txt").text
        projectId = "${project_id}"
        clientRequired = true
        serverRequired = true
        minecraftVersions.add("1.20.1")
        requires("nirvana-library")
    }
/*
    // Modrinth options used by both Fabric and Forge
    def mrOptions = modrinthOptions {
        accessToken = file("D:\\modrinth-key.txt").text
        projectId = "6gKEW2ql"
        minecraftVersionRange {
            start = "1.21"
            end = "${minecraft_version}"
        }
    }*/

    // Fabric specific options for CurseForge
    curseforge("curseforgeFabric") {
        from cfOptions
        file = project.provider { project(":fabric").tasks.remapJar }.flatMap { it.archiveFile }
        modLoaders.add("fabric")
        displayName = file.map { it.asFile.name }
    }

    // Forge specific options for CurseForge
    curseforge("curseforgeForge") {
        from cfOptions
        file = project.provider { project(":forge").tasks.reobfJar }.flatMap { it.archiveFile }
        modLoaders.add("forge")
        displayName = file.map { it.asFile.name }
    }
/*
    // Fabric specific options for Modrinth
    modrinth("modrinthFabric") {
        from mrOptions
        file = project.provider { project(":fabric").tasks.remapJar }.flatMap { it.archiveFile }
        modLoaders.add("fabric")
        requires {
            slug = "fabric-api"
        }
        displayName = file.map { it.asFile.name }
    }

    // Forge specific options for Modrinth
    modrinth("modrinthNeoforge") {
        from mrOptions
        file = project.provider { project(":neoforge").tasks.shadowJar }.flatMap { it.archiveFile }
        modLoaders.add("neoforge")
        displayName = file.map { it.asFile.name }
    }*/

}

