plugins {
    id 'multiloader-common'
    id 'net.neoforged.moddev.legacyforge'
    id 'org.jetbrains.kotlin.jvm'
    id 'org.jetbrains.kotlin.plugin.serialization'
}

legacyForge {
    mcpVersion = minecraft_version
    if (file("src/main/resources/META-INF/accesstransformer.cfg").exists()) {
        accessTransformers = ["src/main/resources/META-INF/accesstransformer.cfg"]
    }
    parchment {
        minecraftVersion = parchment_minecraft
        mappingsVersion = parchment_version
    }
}

dependencies {
    compileOnly group:'org.spongepowered', name:'mixin', version:'0.8.5'
    implementation group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.1'

    compileOnly 'org.projectlombok:lombok:1.18.34'
    annotationProcessor 'org.projectlombok:lombok:1.18.34'

    testCompileOnly 'org.projectlombok:lombok:1.18.34'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.34'

    modCompileOnly ("maven.modrinth:nirvana-library:forge-${minecraft_version}-${lib_version}")
    //modCompileOnly ("blank:Nirvana Lib-forge-1.20.1:2.0.8")
    modImplementation("maven.modrinth:common-network:1.0.5-1.20.1"){
        transitive = false
    }

    modCompileOnly ("curse.maven:ftb-library-forge-404465:6164053")
    modCompileOnly ("curse.maven:ftb-teams-forge-404468:6130786")

    modCompileOnly "me.fzzyhmstrs:fzzy_config:${fzzy_config_version}+${minecraft_version}+forge"
}

configurations {
    commonJava {
        canBeResolved = false
        canBeConsumed = true
    }
    commonResources {
        canBeResolved = false
        canBeConsumed = true
    }
}

artifacts {
    commonJava sourceSets.main.java.sourceDirectories.singleFile
    commonResources sourceSets.main.resources.sourceDirectories.singleFile
}

